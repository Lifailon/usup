<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>fileName</string>
        <string>debug</string>
        <string>credentials</string>
        <string>envVars</string>
        <string>repoPath</string>
        <string>repoBranch</string>
        <string>localHostList</string>
        <string>env</string>
        <string>command</string>
        <string>network</string>
        <string>target</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@338.va_0a_b_50e29397">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>repoPath</name>
          <description>Set the repository on GitHub that contains the configurations.
Format: &lt;USERNAME/REPOSITORY&gt;.</description>
          <defaultValue>Lifailon/usup</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.8">
          <name>repoBranch</name>
          <description>Select branch.</description>
          <randomName>choice-parameter-926799388676352</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import groovy.json.JsonSlurper

                        def url = &quot;https://api.github.com/repos/${repoPath}/branches&quot;
                        def URL = new URL(url)
                        def connection = URL.openConnection()
                        connection.requestMethod = &apos;GET&apos;
                        connection.setRequestProperty(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;)
                        def response = connection.inputStream.text

                        def json = new JsonSlurper().parseText(response)
                        def branches = json.collect { it.name }
                        return branches as List
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath</referencedParameters>
          <choiceType>PT_RADIO</choiceType>
          <filterable>false</filterable>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.8">
          <name>fileName</name>
          <description>Select configuration file in yml or yaml format.</description>
          <randomName>choice-parameter-926799389803943</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import groovy.json.JsonSlurper

                        def url = &quot;https://api.github.com/repos/${repoPath}/git/trees/${repoBranch}?recursive=1&quot;
                        def URL = new URL(url)
                        def connection = URL.openConnection()
                        connection.requestMethod = &apos;GET&apos;
                        def response = connection.inputStream.text

                        def json = new JsonSlurper().parseText(response)
                        def yamlFiles = json.tree.findAll { 
                            (it.path.endsWith(&apos;.yml&apos;) || it.path.endsWith(&apos;.yaml&apos;)) &amp;&amp; 
                            !it.path.split(&apos;/&apos;).any { dir -&gt; dir.startsWith(&apos;.&apos;) }
                        }.collect { it.path }
                        return yamlFiles as List
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath,repoBranch</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.8">
          <name>network</name>
          <description>Select network (aliace for host list).</description>
          <randomName>choice-parameter-926799394728364</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        return data.networks.keySet() as List
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath,repoBranch,fileName</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <hudson.model.TextParameterDefinition>
          <name>localHostList</name>
          <description>Set the host list.
Each host on a new line in the format &lt;USERNAME@HOSTNAME:PORT&gt;.
⚠️ To use the parameter, select the network: &quot;local-host-list&quot;.</description>
          <defaultValue>lifailon@192.168.3.105:2121
lifailon@192.168.3.106:2121</defaultValue>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.8">
          <name>command</name>
          <description>Select command for execution.</description>
          <randomName>choice-parameter-926799401239820</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        return data.commands.keySet() as List
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath,repoBranch,fileName</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.CascadeChoiceParameter plugin="uno-choice@2.8.8">
          <name>target</name>
          <description>Select target (alias for a group of commands) to execution.
⚠️ Use &quot;null&quot; to execution the selected command.</description>
          <randomName>choice-parameter-926799402553504</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        def targetsList = data.targets.keySet() as List
                        targetsList.add(0, null)
                        return targetsList
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath,repoBranch,fileName</referencedParameters>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>true</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.CascadeChoiceParameter>
        <org.biouno.unochoice.DynamicReferenceParameter plugin="uno-choice@2.8.8">
          <name>env</name>
          <description>List of environment variables used (read-only parameter).</description>
          <randomName>choice-parameter-926799403607040</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1373.vb_b_4a_a_c26fa_00">
              <script>
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        def keyValueList = []
                        for (entry in data.env.entrySet()) {
                            keyValueList.add(&quot;${entry.key}=${entry.value}&quot;)
                        }
                        return keyValueList as List
                    </script>
              <sandbox>true</sandbox>
            </secureScript>
          </script>
          <parameters class="linked-hash-map"/>
          <referencedParameters>repoPath,repoBranch,fileName</referencedParameters>
          <choiceType>ET_UNORDERED_LIST</choiceType>
          <omitValueField>false</omitValueField>
        </org.biouno.unochoice.DynamicReferenceParameter>
        <hudson.model.TextParameterDefinition>
          <name>envVars</name>
          <description>Change variable values in the format &lt;KEY=VALUE&gt; (each variable on a new line).
Example: COMMAND=uptime (used in &quot;run-env&quot; command).</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <com.cloudbees.plugins.credentials.CredentialsParameterDefinition plugin="credentials@1415.v831096eb_5534">
          <name>credentials</name>
          <description>SSH Username with private key from Jenkins Credentials for ssh connection.</description>
          <credentialType>SSH Username with private key</credentialType>
          <required>false</required>
        </com.cloudbees.plugins.credentials.CredentialsParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>debug</name>
          <description>Enable debug mode.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4151.v5406e29e3c90">
    <script>def SSH_KEY_FILE = &quot;&quot;

pipeline {
    agent any
    options {
        timeout(time: 10, unit: &apos;MINUTES&apos;)
        // Plugin: https://plugins.jenkins.io/ansicolor
        ansiColor(&apos;xterm&apos;)
    }
    // Params: https://www.jenkins.io/doc/pipeline/steps/pipeline-input-step
    parameters {
        // String Parameter
        string(
            name: &apos;repoPath&apos;,
            description: &apos;Set the repository on GitHub that contains the configurations.\nFormat: &lt;USERNAME/REPOSITORY&gt;.&apos;,
            defaultValue: &apos;Lifailon/usup&apos;,
            trim: true
        )
        // Active Choices Reactive Parameter
        // Plugin: https://plugins.jenkins.io/uno-choice
        reactiveChoice(
            name: &apos;repoBranch&apos;,
            description: &apos;Select branch.&apos;,
            choiceType: &apos;PT_RADIO&apos;,
            filterable: false,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import groovy.json.JsonSlurper

                        def url = &quot;https://api.github.com/repos/${repoPath}/branches&quot;
                        def URL = new URL(url)
                        def connection = URL.openConnection()
                        connection.requestMethod = &apos;GET&apos;
                        connection.setRequestProperty(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;)
                        def response = connection.inputStream.text

                        def json = new JsonSlurper().parseText(response)
                        def branches = json.collect { it.name }
                        return branches as List
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath&apos;
        )
        reactiveChoice(
            name: &apos;fileName&apos;,
            description: &apos;Select configuration file in yml or yaml format.&apos;,
            choiceType: &apos;PT_SINGLE_SELECT&apos;,
            filterable: true,
            filterLength: 1,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import groovy.json.JsonSlurper

                        def url = &quot;https://api.github.com/repos/${repoPath}/git/trees/${repoBranch}?recursive=1&quot;
                        def URL = new URL(url)
                        def connection = URL.openConnection()
                        connection.requestMethod = &apos;GET&apos;
                        def response = connection.inputStream.text

                        def json = new JsonSlurper().parseText(response)
                        def yamlFiles = json.tree.findAll { 
                            (it.path.endsWith(&apos;.yml&apos;) || it.path.endsWith(&apos;.yaml&apos;)) &amp;&amp; 
                            !it.path.split(&apos;/&apos;).any { dir -&gt; dir.startsWith(&apos;.&apos;) }
                        }.collect { it.path }
                        return yamlFiles as List
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath,repoBranch&apos;
        )
        reactiveChoice(
            name: &apos;network&apos;,
            description: &apos;Select network (aliace for host list).&apos;,
            choiceType: &apos;PT_SINGLE_SELECT&apos;,
            filterable: true,
            filterLength: 1,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        return data.networks.keySet() as List
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath,repoBranch,fileName&apos;
        )
        // Multi-line String Parameter
        text(
            name: &apos;localHostList&apos;,
            defaultValue: &apos;lifailon@192.168.3.105:2121\nlifailon@192.168.3.106:2121&apos;,
            description: &apos;Set the host list.\nEach host on a new line in the format &lt;USERNAME@HOSTNAME:PORT&gt;.\n⚠️ To use the parameter, select the network: &quot;local-host-list&quot;.&apos;
        )
        reactiveChoice(
            name: &apos;command&apos;,
            description: &apos;Select command for execution.&apos;,
            choiceType: &apos;PT_SINGLE_SELECT&apos;,
            filterable: true,
            filterLength: 1,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        return data.commands.keySet() as List
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath,repoBranch,fileName&apos;
        )
        reactiveChoice(
            name: &apos;target&apos;,
            description: &apos;Select target (alias for a group of commands) to execution.\n⚠️ Use &quot;null&quot; to execution the selected command.&apos;,
            choiceType: &apos;PT_SINGLE_SELECT&apos;,
            filterable: true,
            filterLength: 1,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        def targetsList = data.targets.keySet() as List
                        targetsList.add(0, null)
                        return targetsList
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath,repoBranch,fileName&apos;
        )
        activeChoiceHtml(
            name: &apos;env&apos;,
            description: &apos;List of environment variables used (read-only parameter).&apos;,
            choiceType: &apos;ET_UNORDERED_LIST&apos;,
            script: [
                $class: &apos;GroovyScript&apos;,
                script: [
                    sandbox: true,
                    script: &apos;&apos;&apos;
                        import org.yaml.snakeyaml.Yaml

                        def url = &quot;https://raw.githubusercontent.com/${repoPath}/refs/heads/${repoBranch}/${fileName}&quot;
                        def supfile = new URL(url).getText()

                        def yaml = new Yaml()
                        def data = yaml.load(supfile)

                        def keyValueList = []
                        for (entry in data.env.entrySet()) {
                            keyValueList.add(&quot;${entry.key}=${entry.value}&quot;)
                        }
                        return keyValueList as List
                    &apos;&apos;&apos;
                ]
            ],
            referencedParameters: &apos;repoPath,repoBranch,fileName&apos;
        )
        text(
            name: &apos;envVars&apos;,
            description: &apos;Change variable values in the format &lt;KEY=VALUE&gt; (each variable on a new line).\nExample: COMMAND=uptime (used in &quot;run-env&quot; command).&apos;
        )
        // Credentials Parameter
        credentials(
            name: &apos;credentials&apos;,
            description: &apos;SSH Username with private key from Jenkins Credentials for ssh connection.&apos;,
            credentialType: &apos;SSH Username with private key&apos;
        )
        // Boolean Parameter
        booleanParam(
            name: &quot;debug&quot;,
            defaultValue: false,
            description: &apos;Enable debug mode.&apos;
        )
    }
    stages {
        stage(&apos;Check params&apos;) {
            steps {
                script {
                    echo &quot;Selected repository: ${params.repoPath}&quot;
                    echo &quot;Selected branch: ${params.repoBranch}&quot;
                    echo &quot;Selected fileName: ${params.fileName}&quot;
                    echo &quot;Selected network: ${params.network}&quot;
                    echo &quot;Selected localHostList: ${params.localHostList}&quot;
                    echo &quot;Selected command: ${params.command}&quot;
                    echo &quot;Selected target: ${params.target}&quot;
                    echo &quot;Selected env: ${params.env}&quot;
                    echo &quot;Selected envVars: ${params.envVars}&quot;
                    echo &quot;Selected credentials: ${params.credentials}&quot;
                }
            }
        }
        stage(&apos;Get ssh key&apos;) {
            steps {
                script {
                    SSH_KEY_FILE = sh(
                        script: &quot;echo $HOME&quot;,
                        returnStdout: true
                    ).trim() + &quot;/.ssh/id_rsa&quot;
                    withCredentials(
                        [
                            sshUserPrivateKey(
                                credentialsId: params.credentials,
                                keyFileVariable: &apos;SSH_KEY&apos;,
                                passphraseVariable: &apos;&apos;
                            )
                        ]
                    ) {
                        writeFile(
                            file: SSH_KEY_FILE,
                            text: readFile(SSH_KEY)
                        )
                        sh &quot;chmod 600 ${SSH_KEY_FILE}&quot;
                    }
                }
            }
        }
        stage(&apos;Install usup&apos;) {
            steps {
                script {
                    // Get arch on agent and download usup binary from GitHub
                    sh &quot;&quot;&quot;
                        GITHUB_LATEST_VERSION=\$(curl -L -sS -H &apos;Accept: application/json&apos; https://github.com/Lifailon/usup/releases/latest | sed -e &apos;s/.*&quot;tag_name&quot;:&quot;\\([^&quot;]*\\)&quot;.*/\\1/&apos;)
                        ARCH=\$(uname -m)
                        case \$ARCH in
                            x86_64|amd64) ARCH=&quot;amd64&quot; ;;
                            aarch64) ARCH=&quot;arm64&quot; ;;
                        esac
                        BIN_URL=&quot;https://github.com/Lifailon/usup/releases/download/\$GITHUB_LATEST_VERSION/usup-\$GITHUB_LATEST_VERSION-linux-\$ARCH&quot;
                        curl -L -sS &quot;\$BIN_URL&quot; -o ${env.WORKSPACE}/usup
                        chmod +x ${env.WORKSPACE}/usup
                        ${env.WORKSPACE}/usup -v
                    &quot;&quot;&quot;
                }
            }
        }
        stage(&apos;Run usup&apos;) {
            steps {
                script {
                    // Get host list from param
                    writeFile file: &apos;hostlist&apos;, text: params.localHostList
                    def hostlist = readFile(&apos;hostlist&apos;)
                    echo &quot;Local host list in file:\n${hostlist}&quot;

                    // Check params
                    def options = &quot;-u https://raw.githubusercontent.com/${params.repoPath}/refs/heads/main/${params.fileName}&quot;
                    sh &quot;${env.WORKSPACE}/usup ${options} || true&quot;
                    sh &quot;${env.WORKSPACE}/usup ${options} ${params.network} || true&quot;

                    // Get env from param
                    def envVars = params.envVars.trim().split(&apos;\n&apos;)
                    def envParams = []
                    for (line in envVars) {
                        if (line.trim() ==~ /^[A-Za-z_][A-Za-z0-9_]*=.*/) {
                            envParams &lt;&lt; &quot;-e \&quot;${line.trim()}\&quot;&quot;
                        }
                    }
                    def envList = envParams.join(&apos; &apos;)
                    echo &quot;Environment variables list for flag: ${envList}&quot;

                    // Set options
                    if (envParams.size() &gt; 0) {
                        options += &quot; ${envList}&quot;
                    }

                    // Add debug mode
                    if (params.debug) {
                        options += &quot; -D&quot;
                    }

                    // Run usup
                    if (params.target == &quot;null&quot;) {
                        sh &quot;&quot;&quot;
                            ${env.WORKSPACE}/usup ${options} ${params.network} ${params.command}
                        &quot;&quot;&quot;
                    } else {
                        sh &quot;&quot;&quot;
                            ${env.WORKSPACE}/usup ${options} ${params.network} ${params.target}
                        &quot;&quot;&quot;
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                sh &quot;&quot;&quot;
                    rm -f ${env.WORKSPACE}/usup ${SSH_KEY_FILE}
                &quot;&quot;&quot;
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <quietPeriod>0</quietPeriod>
  <disabled>false</disabled>
</flow-definition>