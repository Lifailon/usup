env:
  TIMEZONE: Europe/Moscow
  USERNAME: lifailon

networks:
  local:
    hosts:
      - localhost
  dev:
    hosts:
      - lifailon@192.168.3.101:2121
      - lifailon@192.168.3.104:2121
  remote-list:
    inventory: printf '%s\n' $(curl -s https://raw.githubusercontent.com/Lifailon/usup/refs/heads/main/hostlist)
  local-list:
    inventory: printf '%s\n' $(cat ./hostlist)

commands:
  update-packages:
    desc: Updates the package list and installs updates for packages
    run: sudo apt-get update -y && sudo apt-get upgrade -y
      
  timezone:
    desc: Set timezone
    run: |
      timedatectl set-timezone $TIMEZONE
      timedatectl

  firewall-disabled:
    desc: Firewall disabled
    run: |
      sudo ufw disable
      sudo nft flush ruleset

  base-package-install:
    desc: Install fzf (fuzzy finder), jq (json query) and tailspin (log file highlighter)
    run: sudo apt install -y fzf jq tailspin

  profile:
    desc: Configuration profile (add oh-my-bash, history search and complete, fzf over bash complete)
    run: |
      bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"
      tee -a "$HOME/.bashrc" << 'EOF'
      # Alias for tailspin
      alias tspin=tailspin
      alias ts=tailspin
      # History ignore and search
      export HISTCONTROL=ignorespace
      if [[ "$-" == *i* ]]; then
          bind '"\e[A": history-search-backward'
          bind '"\e[B": history-search-forward'
      fi
      EOF
      tee -a "$HOME/.bashrc" << 'EOF'
      # Hisory complete via fzf
      if command -v fzf > /dev/null; then
        function hstr {
          local current_input="$READLINE_LINE"
          command=$(tac $HOME/.bash_history | fzf --height 20 --reverse --query="$current_input" | sed -r "s/^\s+[0-9]+\s+[0-9]{4}-[0-9]{2}-[0-9]{2}\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\s//")
          if [[ -n "$command" ]]; then
            READLINE_LINE="$command"
            READLINE_POINT=${#READLINE_LINE}
          fi
        }
        alias h=hstr
        bind -x '"\C-r": h'
      fi
      EOF
      git clone https://github.com/rockandska/fzf-obc $HOME/.local/opt/fzf-obc
      echo "source $HOME/.local/opt/fzf-obc/bin/fzf-obc.bash" >> $HOME/.bashrc
      sudo cp .bashrc /root/

  docker-install:
    desc: Install docker and compose
    run: |
      sudo apt install -y docker.io
      systemctl status docker
      version=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
      curl -L "https://github.com/docker/compose/releases/download/$version/docker-compose-$(uname -s)-$(uname -m)" -o $HOME/.local/bin/docker-compose
      chmod +x $HOME/.local/bin/docker-compose

  docker-permissions:
    desc: Permissions for Docker
    run: |
      sudo usermod -aG docker $USERNAME
      newgrp docker

  docker-tools:
    desc: Install tools for docker
    run: |
      curl -sS https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash
      curl -sS https://raw.githubusercontent.com/Lifailon/lazyjournal/main/install.sh | bash

  docker-socket:
    desc: Configuration TCP socket
    run: |
      sudo cp /lib/systemd/system/docker.service /lib/systemd/system/docker.service.backup
      sudo tee /etc/docker/daemon.json <<EOF
      {
        "hosts": ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]
      }
      EOF
      service=$(cat /lib/systemd/system/docker.service | sed "s/ -H fd:\/\///")
      echo "$service" | sudo tee /lib/systemd/system/docker.service > /dev/null
      sudo systemctl daemon-reload && sudo systemctl restart docker

  docker-mirror:
    desc: Add mirrors for Docker Hub
    run: |
      sudo tee /etc/docker/daemon.json <<EOF
      {
        "registry-mirrors": [
          "https://dockerhub.timeweb.cloud",
          "https://huecker.io",
          "https://mirror.gcr.io",
          "https://daocloud.io",
          "https://c.163.com"
        ]
      }
      EOF
      sudo systemctl restart docker

  fs-tools:
    desc: Install packages for filesystem
    run: |
      sudo apt install -y fd-find
      sudo snap install dust

  sys-tools:
    desc: Install TUI tools for systemctl and SCP
    run: |
      curl https://raw.githubusercontent.com/rgwood/systemctl-tui/master/install.sh | bash
      sudo apt-get install -y libsmbclient
      curl --proto '=https' --tlsv1.2 -sSLf "https://git.io/JBhDb" | sudo sh -s -- -y

  python-install:
    desc: Python and pypi update
    run: sudo apt-get install -y --no-install-recommends python3-pip

  python-packages:
    desc: Install packages from pypi
    run: |
      pip install --break-system-packages intellishell  # Autocomplete for bash history
      pip install --break-system-packages frogmouth     # Markdown Viewer
      pip install --break-system-packages glances       # TOP

  npm-install:
    desc: NPM install (Node.js)
    run: sudo apt install -y npm

  npm-packages:
    desc: Install packages from NPM
    run: |
      sudo npm install -g multranslate
      sudo npm install -g gtop
      sudo npm install -g dockly
      sudo npm install -g git-commander
      sudo npm install -g jsonlint
      sudo npm install -g @microsoft/inshellisense
      is init bash >> $HOME/.bashrc

  go-install:
    desc: Install Go and update profile
    run: |
      sudo snap install go --classic
      cat << 'EOF' >> $HOME/.bashrc
      export PATH=$(go env GOPATH)/bin:$PATH
      EOF

  ps-install:
    desc: Install PowerShell Core
    run: |
      sudo apt-get install -y wget apt-transport-https software-properties-common
      source /etc/os-release
      wget -q https://packages.microsoft.com/config/ubuntu/$VERSION_ID/packages-microsoft-prod.deb
      sudo dpkg -i packages-microsoft-prod.deb
      rm packages-microsoft-prod.deb
      sudo apt-get update
      sudo apt-get install -y powershell

  ps-modules:
    desc: Install modules for PowerShell
    run: |
      pwsh -Command Install-Module psedit -Force
      pwsh -Command Install-Module MySQLite -Force
      pwsh -Command Install-Module PSExcel -Force
      pwsh -Command Install-Module ImportExcel -Force
      pwsh -Command Install-Module FXPSYaml -Force
      pwsh -Command Install-Module PSToml -Force
      pwsh -Command Install-Module PSMarkdown -Force
      pwsh -Command Install-Module Microsoft.PowerShell.ConsoleGuiTools -Force

  dotnet-install:
    desc: Install .NET Runtime 8.0
    run: sudo apt-get install -y dotnet-runtime-8.0

  proxy-install:
    desc: Install SOCKS/HTTP and reverse proxy server
    run: |
      sudo curl -s -L "https://github.com/Lifailon/froxy/releases/download/0.4.0/froxy-0.4.0-linux-x64" -o /usr/local/bin/froxy
      sudo chmod +x /usr/local/bin/froxy

  homebrew-install:
    desc: Install homebrew and update profile
    run: |
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      # echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> $HOME/.bashrc
      echo 'export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"' >> $HOME/.bashrc

  json-tools:
    desc: Install tools for JSON
    run: |
      sudo apt install -y jc  # Convert text to JSON/YAML
      sudo snap install fx    # TUI JSON viewer
      sudo snap install jqp   # TUI jq query
      # brew install jid
      # brew install otree

  yaml-tools:
    desc: Install tools for YAML/XML
    run: |
      brew install dasel            # Like jq for JSON/YAML/TOML/XML/CSV
      sudo snap install yq          # Like jq for YAML/XML/TOML
      sudo apt install -y yamllint  # Check linters for YAML

  html-tools:
    desc: Install tools for HTML
    run: |
      brew install htmlq          # Like jq for HTML
      sudo apt-get install -y xq  # Like jq for HTML/XML

  csv-tools:
    desc: Install tools for CSV
    run: brew install csvlens

targets:
  prep:
    - update-packages
    - timezone
    - firewall-disabled
    - base-package-install
    - profile
  docker:
    - docker-install
    - docker-permissions
    - docker-tools
  packages:
    - fs-tools
    - sys-tools
    - python-install
    - python-packages
    - npm-install
    - npm-packages
    - go-install
  ps-deploy:
    - ps-install
    - ps-modules  
  proxy-deploy:
    - dotnet-install
    - proxy-install
